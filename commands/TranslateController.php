<?php

namespace app\commands;

use Yii;
use yii\console\Controller;
use yii\console\Exception;
use yii\db\Query;
use yii\helpers\Console;
use yii\helpers\VarDumper;

/**
 * Some auto translate commands
 *
 */
class TranslateController extends Controller {

    public $defaultAction = 'region';

    // reference: http://unstats.un.org/unsd/methods/m49/m49regin.htm
    private static $continentCodes = [
        'Africa' => '002',
        'Asia' => '142',
        'Europe' => '150',
        'North America' => '003',
        'Oceania' => '009',
        'South America' => '005',
    ];

    /**
     * Translate country and continent names into locales
     *
     * This command will read the language config and try to
     * translate existing countries and continents in region.php
     *
     */
    public function actionRegion() {
        $langConfig = Yii::getAlias('@app/config/lang.php');
        if (!is_file($langConfig)) {
            throw new Exception("The configuration file does not exist: $langConfig");
        }
        $langConfig = require($langConfig);
        $countries = (new Query())
            ->select(['name', 'iso2'])
            ->from('Countries')
            ->orderBy('name')
        ->all();
        $countries = array_combine(array_column($countries, 'name'), array_column($countries, 'iso2'));
        foreach ($langConfig as $langCode => $langName) {
            $translateFile = Yii::getAlias('@app/messages/' . $langCode . '/region.php');
            if (is_file($translateFile)) {
                $translations = require($translateFile);
                foreach ($translations as $regionName => $translation) {
                    if (strlen($translation) == 0) {
                        $translation = $regionName;
                    }
                    if (isset($countries[$regionName])) {
                        $correctTranslation = locale_get_display_region('-' . $countries[$regionName], $langCode);
                        // handle multiple countries cases
                        if ($correctTranslation != $translation && $correctTranslation != $countries[$regionName]) {
                            $translations[$regionName] = $correctTranslation;
                        }
                    }
                    if (isset(self::$continentCodes[$regionName])) {
                        $correctTranslation = locale_get_display_region('-' . self::$continentCodes[$regionName], $langCode);
                        if ($correctTranslation != $translation) {
                            $translations[$regionName] = $correctTranslation;
                        }
                    }
                }
                $newRegions = array_diff_key($countries, $translations);
                foreach ($newRegions as $newRegion => $translation) {
                    $newRegions[$newRegion] = '';
                    $translation = $newRegion;
                    $correctTranslation = locale_get_display_region('-' . $countries[$newRegion], $langCode);
                    if ($correctTranslation != $translation && $correctTranslation != $countries[$regionName]) {
                        $newRegions[$newRegion] = $correctTranslation;
                    }
                }
                $translations = array_merge($translations, $newRegions);
                $translated = array_filter($translations);
                $untranslated = array_filter($translations, function($v){return empty($v);});
                ksort($translated);
                ksort($untranslated);
                $translations = array_merge($untranslated, $translated);
                $array = VarDumper::export($translations);
                $this->saveToPHP($array, $translateFile, $langCode);
            }
        }
    }

    private function saveToPHP($array, $translateFile, $langCode) {

        $content = <<<EOD
<?php
/**
 * Message translations.
 *
 * This file is automatically generated by 'yii {$this->id}/{$this->action->id}' command.
 * It contains the localizable messages extracted from source code.
 * You may modify this file by translating the extracted messages.
 *
 * Each array element represents the translation (value) of a message (key).
 * If the value is empty, the message is considered as not translated.
 * Messages that no longer need translation will have their translations
 * enclosed between a pair of '@@' marks.
 *
 * Message string can be used with plural forms format. Check i18n section
 * of the guide for details.
 *
 * NOTE: this file must be saved in UTF-8 encoding.
 */
return $array;

EOD;

        if (file_put_contents($translateFile, $content) !== false) {
            $this->stdout("Translation for $langCode saved.\n\n", Console::FG_GREEN);
        } else {
            $this->stdout("Translation for $langCode was NOT saved.\n\n", Console::FG_RED);
        }
    }
}
